# Generated by Django 4.0 on 2023-09-29 04:55

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('is_published', models.BooleanField(default=False)),
                ('is_draft', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('about', models.TextField(blank=True, default='Welome to new Course of Learning')),
                ('slug', models.TextField(primary_key=True, serialize=False, unique=True)),
                ('is_Active', models.BooleanField(default=True)),
                ('resources', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, default=list, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='SubCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('about', models.TextField(blank=True, default='Welome to new SubCourse of Learning', max_length=200)),
                ('is_Active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('bio', models.TextField(auto_created=True, default='I am a new user')),
                ('username', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('display_name', models.CharField(blank=True, max_length=255, null=True)),
                ('karma', models.IntegerField(default=0)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('skills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=15)),
                ('interests', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=15)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('Prefer not to say', 'Prefer not to say')], default='Prefer not to say', max_length=255)),
                ('age', models.IntegerField(default=18)),
                ('phone', models.BigIntegerField(default=0)),
                ('profile_pic', models.TextField(default='https://img.freepik.com/premium-vector/anime-guy-beach_24911-70757.jpg')),
                ('banner_pic', models.TextField(default='https://img.freepik.com/free-photo/psychedelic-paper-shapes-with-copy-space_23-2149378246.jpg?w=1800&t=st=1685775473~exp=1685776073~hmac=5f072e26cc9a086a94fa84df41dd56e01ba69cdcbf9efd71891a81e6a9059a11')),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('password', models.TextField(max_length=255)),
                ('github', models.TextField(blank=True, null=True)),
                ('linkedin', models.TextField(blank=True, null=True)),
                ('twitter', models.TextField(blank=True, null=True)),
                ('website', models.TextField(blank=True, null=True)),
                ('profession', models.TextField(blank=True, null=True)),
                ('location', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('temp_otp', models.IntegerField(blank=True, default=0, null=True)),
                ('temp_otp_time', models.DateTimeField(blank=True, null=True)),
                ('reset_password_token', models.CharField(blank=True, max_length=255, null=True)),
                ('reset_password_token_time', models.DateTimeField(blank=True, null=True)),
                ('account_setup_completed', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_banned', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='followers', to='app.User')),
                ('following', models.ManyToManyField(blank=True, related_name='following', to='app.User')),
            ],
        ),
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('todo', models.CharField(max_length=255)),
                ('status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='todo_author', to='app.user')),
            ],
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('subtitle', models.CharField(max_length=255)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=15)),
                ('tech_stack', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=15)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_published', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('bannerImage', models.TextField(blank=True, default='https://t4.ftcdn.net/jpg/03/02/74/89/360_F_302748918_Vs76DTDodjhhkYuCEFahu0LcoDZkBuaW.jpg')),
                ('mainImage', models.TextField(blank=True, default='https://t4.ftcdn.net/jpg/03/02/74/89/360_F_302748918_Vs76DTDodjhhkYuCEFahu0LcoDZkBuaW.jpg')),
                ('demoLink', models.URLField(blank=True)),
                ('githubLink', models.URLField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_author', to='app.user')),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='project_bookmark', to='app.User')),
                ('collaborators', models.ManyToManyField(blank=True, related_name='project_collaborators', to='app.User')),
                ('upvotes', models.ManyToManyField(blank=True, related_name='project_upvotes', to='app.User')),
                ('views', models.ManyToManyField(blank=True, related_name='project_views', to='app.User')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('about', models.TextField(blank=True, default='Welome to new Track of Learning')),
                ('level', models.TextField(blank=True, choices=[('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced')], default='Beginner', max_length=200)),
                ('slug', models.TextField(primary_key=True, serialize=False, unique=True)),
                ('is_Active', models.BooleanField(default=True)),
                ('resources', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, default=list, size=None)),
                ('authors', models.ManyToManyField(related_name='authors', to='app.User')),
                ('courses', models.ManyToManyField(blank=True, related_name='courses', to='app.Course')),
                ('students', models.ManyToManyField(blank=True, related_name='students', to='app.User')),
            ],
        ),
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=None, size=None)),
                ('type', models.TextField(blank=True, default='Discussion', max_length=200)),
                ('slug', models.TextField(primary_key=True, serialize=False, unique=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('is_solved', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user')),
                ('upvotes', models.ManyToManyField(blank=True, related_name='upvotes', to='app.User')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='authors',
            field=models.ManyToManyField(related_name='course_authors', to='app.User'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='course_students', to='app.User'),
        ),
        migrations.AddField(
            model_name='course',
            name='sub_courses',
            field=models.ManyToManyField(blank=True, related_name='sub_courses', to='app.SubCourse'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='app.blog')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='app.comment')),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user')),
                ('forum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.forum')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='app.chat')),
                ('upvotes', models.ManyToManyField(blank=True, related_name='chat_upvotes', to='app.User')),
            ],
        ),
        migrations.AddField(
            model_name='blog',
            name='appreciators',
            field=models.ManyToManyField(blank=True, related_name='appreciated_blogs', to='app.User'),
        ),
        migrations.AddField(
            model_name='blog',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user'),
        ),
    ]
